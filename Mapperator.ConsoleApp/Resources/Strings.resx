<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="About" xml:space="preserve">
    <value>Mapperator is a tool for automatically improving osu! beatmaps.
Basic usage:
-e "collection name" "output location"
-c "data file" "beatmap file" "output location"</value>
  </data>
  <data name="CouldNotFindCollection" xml:space="preserve">
    <value>Could not find collection '{0}'.</value>
  </data>
  <data name="NotEnoughArguments" xml:space="preserve">
    <value>Not enough arguments provided. Expected {0} arguments.</value>
  </data>
  <data name="Test" xml:space="preserve">
    <value>Hello world!</value>
  </data>
  <data name="UnknownCommand" xml:space="preserve">
    <value>Unknown command: "{0}"</value>
  </data>
  <data name="WindowsOnlyOperation" xml:space="preserve">
    <value>This operation is only compatible with Windows.</value>
  </data>
  <data name="Program_PatternSearchMap_Found_match__0__in_beatmap___1_" xml:space="preserve">
    <value>Found match {0} in beatmap: {1}</value>
  </data>
  <data name="Program_PatternSearchMap_Can_t_parse_this_map__" xml:space="preserve">
    <value>Can't parse this map: </value>
  </data>
  <data name="Program_DoBuildGraph_The__0__matcher_is_not_compatible_with_building_" xml:space="preserve">
    <value>The {0} matcher is not compatible with building.</value>
  </data>
  <data name="Program_DoMapConvert_Extracting_data___" xml:space="preserve">
    <value>Extracting data...</value>
  </data>
  <data name="Program_DoMapConvert_Constructing_beatmap___" xml:space="preserve">
    <value>Constructing beatmap...</value>
  </data>
  <data name="Program_DoMapConvert_Adding_data___" xml:space="preserve">
    <value>Adding data...</value>
  </data>
  <data name="Program_DoMapConvert_Elapsed_Time_is" xml:space="preserve">
    <value>Elapsed Time is {0} ms</value>
  </data>
  <data name="CouldNotFindFile" xml:space="preserve">
    <value>Could not find file '{0}'.</value>
  </data>
  <data name="ErrorReadingFile" xml:space="preserve">
    <value>Error reading file '{0}':
{1}</value>
  </data>
  <data name="FullBeatmapName" xml:space="preserve">
    <value>{0} - {1} ({2}) [{3}]</value>
  </data>
  <data name="Program_DoMapConvert_Converting_spacing_to_reference_beatmap___" xml:space="preserve">
    <value>Converting spacing to reference beatmap...</value>
  </data>
  <data name="Count_DoDataCount_Total_file_size___0__MB" xml:space="preserve">
    <value>Total file size: {0} MB</value>
  </data>
  <data name="Count_DoDataCount_Total_duration___0_" xml:space="preserve">
    <value>Total duration: {0}</value>
  </data>
  <data name="Dataset_DoDataExtraction_Finding_beatmap_sets___" xml:space="preserve">
    <value>Finding beatmap sets...</value>
  </data>
  <data name="Dataset_DoDataExtraction_Count_Update" xml:space="preserve">
    <value>{0} sets found</value>
  </data>
  <data name="Dataset_DoDataExtraction_Writing_dataset___" xml:space="preserve">
    <value>Writing dataset...</value>
  </data>
  <data name="Dataset_DoDataExtraction_Copy_Update" xml:space="preserve">
      <value>Copied beatmap set {0}/{1}</value>
  </data>
  <data name="ConvertML_DoMapConvert_Loading_ML_model___" xml:space="preserve">
    <value>Loading ML model...</value>
  </data>
  <data name="Dataset_DoDataExtraction2_OMDB_tags_file_not_found" xml:space="preserve">
    <value>OMDB tags file not found</value>
  </data>
  <data name="Count_DoDataCount_Total_beatmap_sets___0_" xml:space="preserve">
    <value>Total number of beatmap sets: {0}</value>
  </data>
  <data name="Count_DoDataCount_Total_beatmaps___0_" xml:space="preserve">
    <value>Total number of beatmaps: {0}</value>
  </data>
  <data name="Dataset2_DoDataExtraction2_Skipping__0__because_checksum_does_not_match_" xml:space="preserve">
    <value>Skipping {0} because checksum does not match.</value>
  </data>
  <data name="Dataset2_DoDataExtraction2_Skipping__0__because_it_is_not_ranked_" xml:space="preserve">
    <value>Skipping {0} because it is not ranked.</value>
  </data>
  <data name="Dataset2_DoDataExtraction2_Skipping__0__because_ìt_is_not_ranked_" xml:space="preserve">
    <value>Skipping {0} because ìt is not ranked.</value>
  </data>
  <data name="Dataset2_DoDataExtraction2_Loading_online_cache___" xml:space="preserve">
    <value>Loading online cache...</value>
  </data>
  <data name="Dataset2_DoDataExtraction2_Loading_existing_metadata___" xml:space="preserve">
    <value>Loading existing metadata...</value>
  </data>
  <data name="Dataset2_DoDataExtraction2_Loading_existing_sets_with_issues___" xml:space="preserve">
    <value>Loading existing sets with issues...</value>
  </data>
  <data name="Dataset2_DoDataExtraction2_Loading_existing_sets_with_mismatched_checksums___" xml:space="preserve">
    <value>Loading existing sets with mismatched checksums...</value>
  </data>
  <data name="Dataset2_DoDataExtraction2_Audio_file__0__not_found_in__1_" xml:space="preserve">
    <value>Audio file {0} not found in {1}</value>
  </data>
  <data name="Dataset2_DoDataExtraction2_Beatmap_sets_with_issues_" xml:space="preserve">
    <value>Beatmap sets with issues:</value>
  </data>
  <data name="Dataset2_DoDataExtraction2_Beatmap_sets_with_mismatched_checksums_" xml:space="preserve">
    <value>Beatmap sets with mismatched checksums:</value>
  </data>
  <data name="Dataset2_GetBeatmapsetInfo_Rate_limited__waiting_10_seconds___" xml:space="preserve">
    <value>Rate limited, waiting 10 seconds...</value>
  </data>
  <data name="Dataset2_GetBeatmapsetInfo_Timed_out__waiting_10_seconds___" xml:space="preserve">
    <value>Timed-out, waiting 10 seconds...</value>
  </data>
  <data name="Dataset2_DoDataExtraction2_" xml:space="preserve">
    <value>Corrupt audio file: {0}
{1}</value>
  </data>
  <data name="Dataset2_DoDataExtraction2_Counting_total_file_size_and_duration_in_the_dataset___" xml:space="preserve">
    <value>Counting total file size and duration in the dataset...</value>
  </data>
  <data name="Dataset2_DoDataExtraction2_Missing_ranked_beatmap_sets_" xml:space="preserve">
    <value>Missing ranked beatmap sets:</value>
  </data>
  <data name="Dataset2_DoDataExtraction2_Checking_for_missing_metadata___" xml:space="preserve">
    <value>Checking for missing metadata...</value>
  </data>
  <data name="Dataset2_DoDataExtraction2_Missing_metadata_for__0_" xml:space="preserve">
    <value>Missing metadata for {0}</value>
  </data>
  <data name="Dataset2_DoDataExtraction2_Checking_for_missing_data___" xml:space="preserve">
    <value>Checking for missing data...</value>
  </data>
  <data name="Dataset2_DoDataExtraction2_Missing_beatmap_for__0_" xml:space="preserve">
    <value>Missing beatmap for {0}</value>
  </data>
  <data name="Dataset2_DoDataExtraction2_Missing_audio_file_for__0_" xml:space="preserve">
    <value>Missing audio file for {0}</value>
  </data>
  <data name="Dataset2_DoDataExtraction2_Loading_existing_sets_skipped___" xml:space="preserve">
    <value>Loading existing sets skipped...</value>
  </data>
  <data name="Dataset2_DoDataExtraction2_Beatmap_sets_skipped_due_to_issues_" xml:space="preserve">
    <value>Beatmap sets skipped due to issues:</value>
  </data>
  <data name="Dataset2_DoDataExtraction2_Invalid__osz_file_name_format___0___Expected_format___SetID___Artist_____Title__osz" xml:space="preserve">
    <value>Invalid .osz file name format: {0}. Expected format: &lt;SetID&gt; &lt;Artist&gt; - &lt;Title&gt;.osz</value>
  </data>
  <data name="Dataset2_DoDataExtraction2_No__osu_file_found_in__0___Skipping_" xml:space="preserve">
    <value>No .osu file found in {0}. Skipping.</value>
  </data>
  <data name="Dataset2_DoDataExtraction2_BeatmapSetID_not_found_in__0___Skipping__1__" xml:space="preserve">
    <value>BeatmapSetID not found in {0}. Skipping {1}.</value>
  </data>
  <data name="Dataset2_GetAccessToken_Failed_to_get_osu__API_access_token__Make_sure_your_ClientId_and_ClientSecret_are_correctly_set_in_config_json_" xml:space="preserve">
    <value>Failed to get osu! API access token. Make sure your ClientId and ClientSecret are correctly set in config.json.</value>
  </data>
  <data name="Dataset2_DoDataExtraction2_Skipping__0__because_checksum_does_not_match_and_BeatmapID_is_not_found_" xml:space="preserve">
    <value>Skipping {0} because checksum does not match and BeatmapID is not found.</value>
  </data>
  <data name="Dataset2_DoDataExtraction2_Skipping__0__because_it_has_no_beatmaps_matching_the_criteria_" xml:space="preserve">
    <value>Skipping {0} because it has no beatmaps matching the criteria.</value>
  </data>
  <data name="Dataset2_DoDataExtraction2_Skipping__0__because_it_does_not_match_the_criteria_" xml:space="preserve">
    <value>Skipping {0} because it does not match the criteria.</value>
  </data>
  <data name="Dataset2_DoDataExtraction2_Failed_to_decode_beatmap__0____1_" xml:space="preserve">
    <value>Failed to decode beatmap {0}: {1}</value>
  </data>
  <data name="Dataset2_DoDataExtraction2_Mapset___0____1_" xml:space="preserve">
    <value>Mapset #{0}: {1}</value>
  </data>
  <data name="Dataset2_DoDataExtraction2_Maximum_beatmap_set_count_of__0__reached__Stopping_extraction_" xml:space="preserve">
    <value>Maximum beatmap set count of {0} reached. Stopping extraction.</value>
  </data>
  <data name="Dataset2_DoDataExtraction2_Deleting_beatmap_set_folder__0__due_to_issues_" xml:space="preserve">
    <value>Deleting beatmap set folder {0} due to issues.</value>
  </data>
  <data name="Dataset2_DoDataExtraction2_Failed_to_get_beatmap_set_info_for_ID__0____1_" xml:space="preserve">
    <value>Failed to get beatmap set info for ID {0}: {1}</value>
  </data>
  <data name="Dataset2_DoDataExtraction2_Error_reading_audio_duration_for__0____1_" xml:space="preserve">
    <value>Error reading audio duration for {0}: {1}</value>
  </data>
  <data name="Dataset2_DoDataExtraction2_Skipping__0__because_it_is_mapped_only__1_F2___of_the_song_" xml:space="preserve">
    <value>Skipping {0} because it is mapped for only {1:F2}% of the song.</value>
  </data>
  <data name="Dataset2_SearchArchiveForOszFiles_Error_opening__osz_file__0____1_" xml:space="preserve">
    <value>Error opening .osz file {0}: {1}</value>
  </data>
  <data name="Dataset2_DoDataExtraction2_Audio_filename_is_missing_in_beatmap__0___Skipping_this_beatmap_" xml:space="preserve">
    <value>Audio filename is missing in beatmap {0}. Skipping this beatmap.</value>
  </data>
  <data name="Dataset2_DoDataExtraction2_Unexpected_error_processing_beatmap_set__0____1___2_" xml:space="preserve">
    <value>Unexpected error processing beatmap set {0}: {1} {2}</value>
  </data>
</root>